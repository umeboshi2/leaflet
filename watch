#!/usr/bin/env python
import os
import sys
import time
import subprocess

import pyinotify

package_name = 'leaflet'

javascript_directory = os.path.join(package_name, 'static/js/')
css_directory = os.path.join(package_name, 'static/css/')

coffee_cmd = ['coffee', '-wc', '-o', javascript_directory, 'coffee/']
compass_cmd = ['compass', 'watch']

coffee_proc = subprocess.Popen(coffee_cmd)
compass_proc = subprocess.Popen(compass_cmd)


wm = pyinotify.WatchManager()

# when a process completes writing a file
mask = pyinotify.IN_CLOSE_WRITE

# take a filename and create a minimized filename
def make_new_filename(basename):
    if basename.endswith('.js'):
        marker = '.js'
    elif basename.endswith('.css'):
        marker = '.css'
    prefix = basename[:-len(marker)]
    suffix = '.min%s' % marker
    return prefix + suffix


def minimize_file(pathname):
    dirname, basename = os.path.split(pathname)
    newname = make_new_filename(basename)
    newpath = os.path.join(dirname, newname)
    cmd = ['yui-compressor', '-o', newpath, pathname]
    subprocess.check_call(cmd)
    

def event_handler(event):
    print "Finished writing", event.pathname
    dirname, basename = os.path.split(event.pathname)
    # check to see if these are the newly created minimized
    # files, and if so, ignore them
    if basename.endswith('.min.js') or basename.endswith('.min.css'):
        print "Ignoring minimized file", basename
    # otherwize, minimize the file
    else:
        print "Minimizing", basename
        minimize_file(event.pathname)
        print "Finished Minimization"
    
    

def notifier_callback(notifier):
    try:
        print notifier.read_events()
    except pyinotify.NotifierError:
        print "NotifierError"
        

wm.add_watch(javascript_directory, mask)
wm.add_watch(css_directory, mask)
notifier = pyinotify.Notifier(wm, event_handler)

#while not (coffee_proc.poll() or compass_proc.poll()):
    #notifier.loop(daemonize=True, callback=notifier_callback)
    #notifier.loop(callback=notifier_callback)
    #time.sleep(5)
    #notifier.loop()

notifier.loop()

# check which one stopped
coffee_ret = coffee_proc.returncode
compass_ret = compass_proc.returncode

if coffee_ret is None:
    print "Stopping coffee"
    coffee_proc.terminate()
else:
    print "coffee returned", coffee_ret


if compass_ret is None:
    print "Stopping compass"
    compass_proc.terminate()
else:
    print "compass returned", compass_ret


